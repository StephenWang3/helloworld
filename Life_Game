#include <iostream>

using namespace std;

const int maxrow=20,maxcol=60;

class Life
{
public:
	void init();
	void update();
	void print();
private:
	int grid[maxrow+2][maxcol+2];
	int neighbor_count(int row,int col);
};

void Life::init(){
		int row,col;
		for (row=0;row<=maxrow+1;row++)
		    for (col=0;col<=maxcol+1;col++)
				grid[row][col]=0;
		cout<<"List the coordinates for living cells."<<endl;
		cout<<"Terminate the list with the special pair (-1,-1)"<<endl;
		cin >> row >> col;
		while (row!=-1||col!=-1){
		    if (row>=1&&row<=maxrow)
				if (col>=1&&col<=maxcol) grid[row][col]=1;
				else cout<<"Column "<<col<<" is out of range."<<endl;
		    else cout<<"Row "<<row<<" is out of range."<<endl;
			cin >> row >> col;
		}	
}

void Life::update(){
	int row,col,new_grid[maxrow+2][maxcol+2];
	for (row=1;row<=maxrow;row++)
		for (col=1;col<=maxcol;col++)
		    switch(neighbor_count(row,col)){//调用统计函数,按结果分情况
		        case 2: new_grid[row][col]=grid[row][col]; break;//不变
		        case 3: new_grid[row][col]=1; break; //激活
		        default: new_grid[row][col]=0; //dead
		    }
	for (row=1;row<=maxrow;row++)
		for (col=1;col<=maxcol;col++)
		    grid[row][col]=new_grid[row][col];//将临时数组中的数据拷贝回原grid数组
}

void Life::print(){
	int row,col;
	cout<<"\nThe current Life configuration is: "<<endl;
	for (row=1;row<=maxrow;row++){
		for (col=1;col<=maxcol;col++)
		    if (grid[row][col]==1) cout<<" * ";
		    	else cout<<"  ";
		    cout<<endl;
		}
		cout<<endl;
}

int Life::neighbor_count(int row,int col){
	int i,j,count=0;
	for (i=row-1;i<=row+1;i++)
		    for (j=col-1;j<=col+1;j++)
			count+=grid[i][j];//如果存活，则累加；否则为0
	count-=grid[row][col];  //去除自己
	return count;
}

bool user_says_yes( )
{
	int c;
	bool initial_response = true;
	do { // Loop until an appropriate input is received.
	if (initial_response)
		cout << " (y,n)? " << flush;
	else
		cout << "Respond with either y or n: " << flush;
	do { // Ignore white space.
		c = cin.get( );
		} while (c == '\n' || c == '  ' || c == '\t');
	initial_response = false;
} while (c != 'y' && c != 'Y' && c != 'n' && c != 'N');
return (c == 'y' || c == 'Y');
}

int main()
{
	int row, col;
	Life configuration;
	configuration.init( );
	configuration.print();
	cout << "Continue viewing new generations? " << endl; 
	while (user_says_yes( )) {
		configuration.update( );
		configuration.print( );
		cout << "Continue viewing new generations? " << endl;
	}
}
